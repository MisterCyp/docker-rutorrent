#!/usr/bin/env sh

# Var color
CSI="\033["
CEND="${CSI}0m"
CRED="${CSI}1;31m"
CGREEN="${CSI}1;32m"
CYELLOW="${CSI}1;33m"
CBLUE="${CSI}1;34m"

# Functions
f_log() {
  LOG_TYPE="${1}"
  LOG_MESSAGE="${2}"

  case "${LOG_TYPE}" in
    "INF")
      echo -e "${CBLUE}[$(date +%Y/%m/%d-%H:%M:%S)] ${LOG_MESSAGE}${CEND}"
    ;;
    "SUC")
      echo -e "${CGREEN}[$(date +%Y/%m/%d-%H:%M:%S)] ${LOG_MESSAGE}${CEND}"
    ;;
    "WRN")
      echo -e "${CYELLOW}[$(date +%Y/%m/%d-%H:%M:%S)] ${LOG_MESSAGE}${CEND}"
    ;;
    "ERR")
      echo -e "${CRED}[$(date +%Y/%m/%d-%H:%M:%S)] ${LOG_MESSAGE}${CEND}"
    ;;
  esac
}

# Create user torrent
f_log INF "Create user torrent ..."

if [ "$(grep :${GID}: /etc/group)" == "" ]; then
  addgroup -g "${GID}" torrent
fi

if [ "$(grep :${UID}: /etc/passwd)" == "" ]; then
  group="$(grep :${GID}: /etc/group | cut -f 1 -d :)"
  adduser -h /home/torrent -s /bin/sh -G "${group}" -D -u "${UID}" torrent
fi

f_log SUC "Create user torrent done"

# Create require folder
mkdir -p \
  /data/.watch \
  /data/.session \
  /data/downloads \
  /config/filebot \
  /config/rtorrent \
  /config/rutorrent \
  /config/custom_themes \
  /config/custom_plugins

chown "${UID}:${GID}" /data/.watch /data/.session /data/downloads /nginx

# Generate configuration
f_log INF "Generate configuration ..."

# Externalize rutorrent configuration
if [ -d /config/rutorrent/conf ]; then
  rm -rf /rutorrent/app/conf
  ln -s /config/rutorrent/conf /rutorrent/app/conf
else
  mv /rutorrent/app/conf /config/rutorrent
  ln -s /config/rutorrent/conf /rutorrent/app/conf
fi

# Externalize rutorrent share
if [ -d /config/rutorrent/share ]; then
  rm -rf /rutorrent/app/share
  ln -s /config/rutorrent/share /rutorrent/app/share
else
  mv /rutorrent/app/share /config/rutorrent
  ln -s /config/rutorrent/share /rutorrent/app/share
fi

# Authentification in Rutorrent

if [ -e /nginx/.htpasswd ]; then
  sed -i -e "s|<AUTH>|auth_basic \"Restricted Content\";\n    auth_basic_user_file /nginx/.htpasswd;|g" /etc/nginx/nginx.conf
  f_log INF "Authentification required for rutorrent"
else
  sed -i -e "s|<AUTH>||g" /etc/nginx/nginx.conf
  f_log WRN "No Authentification for rutorrent"
fi

# Add custom plugins
[ "$(ls /config/custom_plugins)" ] && for custom_plugin in $(ls /config/custom_plugins); do
  if [ ! -d "/rutorrent/app/plugins/${custom_plugin}" ]; then
    ln -s "/config/custom_plugins/${custom_plugin}" "/rutorrent/app/plugins/${custom_plugin}"
  fi
done

# Add custom themes
[ "$(ls /config/custom_themes)" ] && for custom_theme in $(ls /config/custom_themes); do
  if [ ! -d "/rutorrent/app/plugins/theme/themes/${custom_theme}" ]; then
    ln -s "/config/custom_themes/${custom_theme}" "/rutorrent/app/plugins/theme/themes/${custom_theme}"
  fi
done

sed -i -e "s|<DHT_RTORRENT>|${DHT_RTORRENT}|g" -e "s|<PORT_RTORRENT>|${PORT_RTORRENT}|g" /home/torrent/.rtorrent.rc

# Externalize rtorrent configuration
if [ -e /config/rtorrent/.rtorrent.rc ]; then
  ln -sf /config/rtorrent/.rtorrent.rc /home/torrent/.rtorrent.rc
else
  mv /home/torrent/.rtorrent.rc /config/rtorrent/.rtorrent.rc
  ln -s /config/rtorrent/.rtorrent.rc /home/torrent/.rtorrent.rc
fi

f_log SUC "Generate configuration done"

# Filebot
if [ -e /filebot/filebot.sh ]; then
  f_log INF "Configuration of filebot ..."
  mkdir -p /data/media

  # Externalize filebot data folder
  if [ -d /config/filebot/data ]; then
    rm -rf /filebot/data
    ln -s /config/filebot/data /filebot/data
  fi

  # Add license file
  if [ ! -e "${FILEBOT_LICENSE}" ]; then
    f_log ERR "License filebot file does not exist"
    exit 1
  elif [ ! -e /filebot/data/.license ]; then
    /filebot/filebot.sh --license "${FILEBOT_LICENSE}"
    # Externalize filebot data folder
    mv /filebot/data /config/filebot/data
    ln -s /config/filebot/data /filebot/data
  fi

  # Externalize args_amc.txt file
  if [ -e /config/filebot/args_amc.txt ]; then
    ln -sf /config/filebot/args_amc.txt /filebot/args_amc.txt
  else
    mv /filebot/args_amc.txt /config/filebot/args_amc.txt
    ln -s /config/filebot/args_amc.txt /filebot/args_amc.txt
  fi

  grep -E "method.set_key.*event.download.finished" /home/torrent/.rtorrent.rc > /dev/null 2>&1
  if [ "$?" -ne 0 ]; then
    echo 'method.set_key = event.download.finished,filebot,"execute2=/usr/local/bin/postdl,$d.directory=,$d.name="' >> /home/torrent/.rtorrent.rc
  fi

  grep -E "method.set_key.*event.download.erased" /home/torrent/.rtorrent.rc > /dev/null 2>&1
  if [ "$?" -ne 0 ]; then
    echo 'method.set_key = event.download.erased,filebot_cleaner,"execute2=/usr/local/bin/postrm"' >> /home/torrent/.rtorrent.rc
  fi

  find /filebot ! -uid "${UID}" -exec chown -h "${UID}:${GID}" {} \;
  chmod +x /usr/local/bin/postdl /usr/local/bin/postrm
  f_log SUC "Configuration of filebot done"
fi

f_log INF "Apply system permissions ..."

for folder in /config /rutorrent /home/torrent /var/lib/nginx /var/log /etc/nginx /etc/php7 /tmp /etc/s6.d /run; do
  find "${folder}" ! -uid "${UID}" -exec chown -h "${UID}:${GID}" {} \;
done

find /etc/s6.d -type f -exec chmod +x {} \;

f_log SUC "Apply system permissions done"

if [ "${CHECK_PERM_DATA}" == "true" ]; then
  f_log INF "Apply data permissions ..."
  find /data ! -uid "${UID}" -exec chown -h "${UID}:${GID}" {} \;
  chown root:root /data # fix chroot sftp
  f_log SUC "Apply data permissions done"
fi

rm -f /data/.session/rtorrent.lock

f_log INF "Start all services ..."

exec su-exec "${UID}":"${GID}" "$@"
